{"version":3,"sources":["BooksAPI.js","Book.js","SearchBooks.js","BookShelf.js","ListBooks.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","book","shelf","fetch","concat","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","then","res","json","search","query","data","books","Book","state","changeShelf","event","_this","setState","target","value","props","updateBookShelf","this","style","width","height","backgroundImage","imageLinks","thumbnail","react_default","a","createElement","className","onChange","disabled","title","authors","React","Component","SearchBooks","bookSearch","updateQuery","BooksAPI","length","_this2","_this$state","react_router_dom","to","type","placeholder","map","src_Book","key","BookShelf","_this$props","thisShelf","filter","name","src_BookShelf","BooksApp","b","_this3","react_router","exact","path","render","src_SearchBooks","ListBooks","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.2ab39c94.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React from 'react'\n\nclass Book extends React.Component {\n  state = {\n    shelf: 'none'\n  }\n\n  componentDidMount() {\n    this.setState({\n      shelf: this.props.book.shelf\n    })\n  }\n\n  //set the state of the shelf to the current shelf\n  changeShelf = (event) => {\n    //set the state to selected shelf\n    this.setState({\n      shelf: event.target.value\n    })\n\n    //pass the new state as an argument to updateBookShelf function\n    this.props.updateBookShelf(this.props.book, event.target.value)\n  }\n\n  render() {\n    const { book } = this.props\n    const { shelf } = this.state\n\n    //style for the book image\n    const style = {\n      width: 128,\n      height: 193,\n      backgroundImage: book.imageLinks ? `url(${book.imageLinks.thumbnail})` : ``\n    }\n\n    return (\n      <li>\n        <div className=\"book\">\n          <div className=\"book-top\">\n            <div className=\"book-cover\" style={style}></div>\n            <div className=\"book-shelf-changer\">\n              <select value={shelf} onChange={this.changeShelf}>\n                <option value=\"move\" disabled>Move to...</option>\n                <option value=\"currentlyReading\">Currently Reading</option>\n                <option value=\"wantToRead\">Want to Read</option>\n                <option value=\"read\">Read</option>\n                <option value=\"none\">None</option>\n              </select>\n            </div>\n          </div>\n          <div className=\"book-title\">{book.title}</div>\n          <div className=\"book-authors\">{book.authors ? book.authors.toString() : ''}</div>\n        </div>\n      </li>\n    )\n  }\n}\n\nexport default Book","import React from 'react'\nimport * as BooksAPI from './BooksAPI'\nimport { Link } from 'react-router-dom'\nimport Book from './Book'\n\nclass SearchBooks extends React.Component {\n  state = {\n    query: '',\n    bookSearch: []\n  }\n\n  //update search to match the input\n  updateQuery = (query) => {\n    this.setState({\n      query: query\n    })\n\n    //show matching books form API\n    //if search field has input\n    if (query) {\n      BooksAPI.search(query).then((books) => {\n        if (books.length) {\n          this.setState({\n            bookSearch: books\n          })\n        } else {\n          this.setState({\n            bookSearch: []\n          })\n        }\n      })\n    }\n  }\n\n  render() {\n    const { query, bookSearch } = this.state\n    const { updateBookShelf } = this.props\n\n    return (\n      <div className=\"search-books\">\n        <div className=\"search-books-bar\">\n          <Link className=\"close-search\" to=\"/\">Close</Link>\n          <div className=\"search-books-input-wrapper\">\n            <input type=\"text\"\n              placeholder=\"Search by title or author\"\n              value={query}\n              onChange={(event) => this.updateQuery(event.target.value)}\n            />\n          </div>\n        </div>\n        <div className=\"search-books-results\">\n          <ol className=\"books-grid\">\n            {bookSearch.map(book => (<Book key={book.id} book={book} updateBookShelf={updateBookShelf}/>))}\n          </ol>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default SearchBooks\n","import React from 'react'\nimport * as BooksAPI from './BooksAPI'\nimport Book from './Book'\n\nclass BookShelf extends React.Component {\n\n  render() {\n    const { thisShelf, books, updateBookShelf } = this.props\n\n    return (\n      <div className=\"bookshelf\">\n        <h2 className=\"bookshelf-title\">{thisShelf.title}</h2>\n        <div className=\"bookshelf-books\">\n          <ol className=\"books-grid\">\n          {books.filter(book => book.shelf === thisShelf.name).map(book => (<Book key={book.id} book={book} updateBookShelf={updateBookShelf}/>))}\n          </ol>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default BookShelf","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport BookShelf from './BookShelf'\n\nclass SearchBooks extends React.Component {\n\n  render() {\n    const { books, updateBookShelf } = this.props\n\n    const shelves = [\n      {title: 'Currently Reading', name: 'currentlyReading'},\n      {title: 'Want to Read', name: 'wantToRead'},\n      {title: 'Read', name: 'read'}\n    ]\n\n    return (\n      <div className=\"list-books\">\n        <div className=\"list-books-title\">\n          <h1>MyReads</h1>\n        </div>\n        <div className=\"list-books-content\">\n          <div>\n            {shelves.map(thisShelf => (<BookShelf key={thisShelf.name} thisShelf={thisShelf} books={books} updateBookShelf={updateBookShelf}/>))}\n          </div>\n        </div>\n        <div className=\"open-search\">\n          <Link to=\"search\">Add a book</Link>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default SearchBooks","import React from 'react'\nimport * as BooksAPI from './BooksAPI'\nimport { Route } from 'react-router-dom'\nimport './App.css'\nimport SearchBooks from './SearchBooks'\nimport ListBooks from './ListBooks'\n\nclass BooksApp extends React.Component {\n  state = {\n    books: []\n  }\n\n  //fetch books from the API\n  componentDidMount() {\n    BooksAPI.getAll().then((books) => {\n      this.setState({ books })\n    })\n  }\n\n  //udate shelf to current shelf in the API\n  //set the state of the book to current shelf\n  updateBookShelf = (book, shelf) => {\n    BooksAPI.update(book, shelf).then(() => {\n      book.shelf = shelf\n      this.setState(state => ({\n        books: state.books.filter(b => b.id !== book.id).concat([book])\n      }))\n    })\n  }\n\n  render() {\n    const { books } = this.state\n\n    return (\n      <div className=\"app\">\n        <Route exact path=\"/search\" render={() => (\n          <SearchBooks books={books} updateBookShelf={this.updateBookShelf}/>\n          )}/>\n        <Route exact path=\"/\" render={() => (\n          <ListBooks books={books} updateBookShelf={this.updateBookShelf}/>\n          )}/>\n      </div>\n    )\n  }\n}\n\nexport default BooksApp","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'))"],"sourceRoot":""}